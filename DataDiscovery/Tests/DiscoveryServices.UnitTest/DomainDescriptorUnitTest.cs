//__________________________________________________________________________________________________
//
//  Copyright (C) 2021, Mariusz Postol LODZ POLAND.
//
//  To be in touch join the community at GitHub: https://github.com/mpostol/OPC-UA-OOI/discussions
//__________________________________________________________________________________________________

using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.IO;
using System.Xml.Serialization;
using UAOOI.DataDiscovery.DiscoveryServices.Models;
using UAOOI.DataDiscovery.DiscoveryServices.UnitTest.TestData;

namespace UAOOI.DataDiscovery.DiscoveryServices.UnitTest
{
  [TestClass]
  public class DomainDescriptorUnitTest
  {
    [TestMethod]
    public void GetRootDomainDescriptorTest()
    {
      DomainDescriptor rootDomainDescriptor = DomainDescriptorFactory.GetRootDomainDescriptor();
      Uri _resolution = rootDomainDescriptor.ResolveUri(m_ModelUri);
      string expectedFirsRoundUrl = "https://raw.githubusercontent.com/mpostol/OPC-UA-OOI/master/DataDiscovery/Tests/DiscoveryServices.UnitTest/TestData/root.zone/commsvr.com/DomainDescriptor.xml";
      Assert.AreEqual<string>(expectedFirsRoundUrl, _resolution.ToString());
      string _fn = "RootDomainDescriptor.xml";
      FileInfo file = new FileInfo($@"TestData\{_fn}");
      using (Stream outputStream = file.Create())
      {
        XmlSerializer _serializer = new XmlSerializer(typeof(DomainDescriptor));
        _serializer.Serialize(outputStream, rootDomainDescriptor);
      }
      file.Refresh();
      Assert.IsTrue(file.Exists);
      Assert.IsTrue(file.Length > 0);
      DomainDescriptor domainDescriptor;
      using (Stream descriptionStream = file.OpenRead())
      {
        XmlSerializer serializer = new XmlSerializer(typeof(DomainDescriptor));
        domainDescriptor = (DomainDescriptor)serializer.Deserialize(descriptionStream);
        Assert.IsNotNull(domainDescriptor);
      }
      Assert.IsTrue(domainDescriptor.Description.Contains("Starting point"));
      Assert.AreEqual<RecordType>(RecordType.DomainDescriptor, domainDescriptor.NextStepRecordType);
      Assert.AreEqual<string>(@"https://raw.githubusercontent.com/mpostol/OPC-UA-OOI/master/DataDiscovery/Tests/DiscoveryServices.UnitTest/TestData/root.zone/#authority#/DomainDescriptor.xml", domainDescriptor.UrlPattern);
      _resolution = domainDescriptor.ResolveUri(m_ModelUri);
      Assert.AreEqual<string>(expectedFirsRoundUrl, _resolution.ToString());
    }

    [TestMethod]
    [DeploymentItem(@"TestData\", @"TestData\")]
    public void RootZoneDomainDescriptorTest()
    {
      DomainDescriptor _referenceDomainDescriptor = DomainDescriptorFactory.GetRootDomainDescriptor();
      AreEqualsDomainDescriptors(_referenceDomainDescriptor, @"root.zone\DomainDescriptor.xml");

      _referenceDomainDescriptor = DomainDescriptorFactory.Iteration1DomainDescriptor();
      AreEqualsDomainDescriptors(_referenceDomainDescriptor, @"root.zone\commsvr.com\DomainDescriptor.xml");

      _referenceDomainDescriptor = DomainDescriptorFactory.Iteration2DomainDescriptor();
      AreEqualsDomainDescriptors(_referenceDomainDescriptor, @"root.zone\commsvr.com\UA\Examples\BoilersSet\DomainDescriptor.xml");
    }

    [TestMethod]
    [DeploymentItem(@"TestData\", @"TestData\")]
    public void DomainDescriptorAutogeneratedFileTest()
    {
      FileInfo _fi = new FileInfo(@"TestData\DomainDescriptor.xml");
      Assert.IsTrue(_fi.Exists);
      DomainDescriptor newDescription = null;
      using (Stream _descriptionStream = _fi.OpenRead())
      {
        XmlSerializer _serializer = new XmlSerializer(typeof(DomainDescriptor));
        newDescription = (DomainDescriptor)_serializer.Deserialize(_descriptionStream);
      }
      Assert.IsNotNull(newDescription);
      Assert.IsFalse(string.IsNullOrEmpty(newDescription.Description));
      Assert.IsFalse(string.IsNullOrEmpty(newDescription.UrlPattern));
    }

    //instrumentation
    private readonly Uri m_ModelUri = new Uri(@"http://commsvr.com/UA/Examples/BoilersSet");

    private static void AreEqualsDomainDescriptors(DomainDescriptor _rootDomainDescriptor, string fileName)
    {
      FileInfo file = new FileInfo($@"TestData\{fileName}");
      Assert.IsTrue(file.Exists);
      DomainDescriptor domainDescriptor;
      using (Stream _descriptionStream = file.OpenRead())
      {
        XmlSerializer _serializer = new XmlSerializer(typeof(DomainDescriptor));
        domainDescriptor = (DomainDescriptor)_serializer.Deserialize(_descriptionStream);
      }
      Assert.IsNotNull(domainDescriptor);
      Assert.AreEqual<string>(_rootDomainDescriptor.Description, domainDescriptor.Description);
      Assert.AreEqual<RecordType>(_rootDomainDescriptor.NextStepRecordType, domainDescriptor.NextStepRecordType);
      Assert.AreEqual<String>(_rootDomainDescriptor.UrlPattern, domainDescriptor.UrlPattern);
    }
  }
}