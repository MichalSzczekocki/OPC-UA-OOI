//__________________________________________________________________________________________________
//
//  Copyright (C) 2022, Mariusz Postol LODZ POLAND.
//
//  To be in touch join the community at GitHub: https://github.com/mpostol/OPC-UA-OOI/discussions
//__________________________________________________________________________________________________

using UAOOI.SemanticData.UANodeSetValidation.DataSerialization;

namespace UAOOI.SemanticData.AddressSpace.Abstractions
{
  /// <summary>
  /// A DataTypeDefinition defines an abstract representation of a UADataType that can be used by design tools to automatically create serialization code.
  /// The definition is according to UANodeset xml schema defined in part 6
  /// </summary>
  public interface IDataTypeDefinition
  {
    /// <summary>
    /// This flag indicates that the data type defines the OptionSetValues Property. This field is optional. The default value is false.
    /// </summary>
    /// <remarks>
    /// New, added according to Release 1.05.01 2022-02-21
    /// </remarks>
    bool IsOptionSet { get; set; }

    /// <summary>
    /// This flag indicates if the data type represents a union.
    /// Only one of the Fields defined for the data type is encoded into a value.
    /// If this value is true the first field is the switch value.
    /// </summary>
    /// <remarks>
    /// This field is optional.The default value is false.
    /// </remarks>
    bool IsUnion { get; set; }

    /// <summary>
    /// The list of fields that make up the data type. This definition assumes the structure has a sequential layout.
    /// For enumerations the fields are simply a list of values.
    /// </summary>
    IDataTypeField[] Field { get; }

    /// <summary>
    /// A unique name for the data type encoded using the syntax QualifiedName.
    /// This field is only specified for nested DataTypeDefinitions.
    /// The BrowseName of the DataType node is used otherwise.
    /// </summary>
    string Name { get; set; }

    /// <summary>
    /// A symbolic name for the data type that can be used as a class/structure name in autogenerated code. It should only be specified if the Name cannot be used for this purpose.
    /// Only letters, digits or the underscore(‘_’) are permitted.
    /// This field is only specified for nested DataTypeDefinitions.
    /// The SymbolicName of the DataType node is used otherwise.
    /// </summary>
    string SymbolicName { get; set; }

    /// <summary>
    /// The name of any base type. Note that the BaseType can refer to types defined in other files.
    /// The NamespaceUri associated with the Name should indicate where to look for the BaseType definition.
    /// This field is only specified for nested DataTypeDefinitions.
    /// The HasSubtype reference of the DataType NodeClass is used otherwise.
    /// </summary>
    string BaseType { get; set; }
  }

  /// <summary>
  /// The Field element of the DataTypeField type defines an abstract representation of a field within a UADataType that can be used by design tools to automatically create serialization code.
  /// </summary>
  public partial interface IDataTypeField
  {
    /// <summary>
    /// A name for the field that is unique within the DataTypeDefinition.
    /// </summary>
    LocalizedText[] DisplayName { get; set; }

    /// <summary>
    /// A description for the field in multiple locales.
    /// </summary>
    LocalizedText[] Description { get; set; }

    /// <summary>
    /// A name for the field that is unique within the DataTypeDefinition.
    /// </summary>
    string Name { get; set; }

    ///<summary>
    /// A symbolic name for the field that can be used in autogenerated code.
    /// It should only be specified if the Name cannot be used for this purpose.
    /// Only letters, digits or the underscore (‘_’) are permitted.
    ///</summary>
    string SymbolicName { get; set; }

    /// <summary>
    /// The NodeId of the DataType for the field.
    /// This NodeId can refer to another Node with its own DataTypeDefinition.
    /// This field is not specified for subtypes of Enumeration.
    /// </summary>
    string DataType { get; set; }

    /// <summary>
    /// The value rank for the field.
    /// It shall be Scalar(-1) or a fixed rank Array (>= 1).
    /// This field is not specified for subtypes of Enumeration.
    /// </summary>
    int ValueRank { get; set; }

    /// <summary>
    /// The maximum length of an array. This field is a comma separated list of unsigned integer values. The list has a number of elements equal to the ValueRank.
    /// The value is 0 if the maximum is not known for a dimension.
    /// This field is not specified if the ValueRank <= 0.This field is not specified for Enumeration or OptionSet DataTypes.
    /// </summary>
    string ArrayDimensions { get; set; }

    /// <summary>
    /// The maximum length of a String or ByteString value. If not known the value is 0. The value is 0 if the DataType is not String or ByteString.
    /// If the ValueRank > 0 the maximum applies to each element in the array.This field is not specified for Enumeration or OptionSet DataTypes.
    /// </summary>
    uint MaxStringLength { get; set; }

    /// <summary>
    /// The value associated with the field. This value is only specified for Enumeration or OptionSet DataTypes.
    /// </summary>
    int Value { get; set; }

    /// <summary>
    /// The field indicates if a data type field in a structure is optional.
    /// The default value is false. This field is not specified for Enumeration, Union or OptionSet DataTypes.
    /// </summary>
    bool IsOptional { get; set; }
  }

  /// <summary>
  /// Calculated part of the definition
  /// </summary>
  public partial interface IDataTypeField
  {
    /// <summary>
    /// The NodeId of the DataType for the field.
    /// This NodeId can refer to another Node with its own DataTypeDefinition.
    /// This field is not specified for subtypes of Enumeration.
    /// </summary>
    NodeId DataTypeNodeId { get; }
  }
}